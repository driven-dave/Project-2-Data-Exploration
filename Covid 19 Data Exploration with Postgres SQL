-- Covid 19 Data Exploration
--Skills used: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views, Converting Data Types

-- Lets view all the data we have.
Select * 
From coviddeaths
Order By location, date;

-- Select Data that we are going to be starting with.
Select location, date, total_cases, new_cases, total_deaths, population 
From coviddeaths
Where location = 'United States'
Order By location, date;

-- Total Cases vs Total Deaths
-- Shows likelihood of dying if you contract covid in your country.
SELECT location, date, total_cases, total_deaths, 
       ROUND(
           CASE 
              WHEN total_cases = 0 THEN NULL 
              ELSE (total_deaths::numeric / NULLIF(total_cases, 0)) * 100
           END, 2) AS DeathPercentage
FROM coviddeaths
Where location = 'United States'
ORDER BY location, date;

--Total Cases vs Population
-- Shows what percentage of population infected with Covid.
SELECT location, date, total_cases, population, 
       ROUND(
           CASE 
              WHEN total_cases = 0 THEN NULL 
              ELSE (total_deaths::numeric / NULLIF(population, 0)) * 100
           END, 2) AS PercentPopulationInfected
FROM coviddeaths
Where location = 'United States'
ORDER BY location, date;

-- Countries with Highest Infection Rate compared to Population
SELECT location, 
       population, 
       Max(total_cases) as HighestInfectionCount,  
       CASE 
          WHEN Max(total_cases) = 0 OR population = 0 THEN NULL 
          ELSE (Max(total_cases)::numeric / population) * 100
       END AS PercentPopulationInfected
FROM coviddeaths
GROUP BY location, population
ORDER BY PercentPopulationInfected DESC NULLS LAST;

--Countries with Highest Death Count per Population
SELECT location, Max(total_deaths)::numeric As TotalDeathCount  
FROM coviddeaths
--The where statment has to include both 'Other' and '0' value
WHERE continent IS NOT NULL AND continent <> 'Other' 
AND continent <> '0'
GROUP BY location
ORDER BY TotalDeathCount DESC;

-- BREAKING THINGS DOWN BY CONTINENT
-- Showing contintents with the highest death count per population
SELECT continent, Max(total_deaths)::numeric As TotalDeathCount  
FROM coviddeaths
--The where statment has to include both 'Other' and '0' value
WHERE continent IS NOT NULL AND continent <> 'Other' 
AND continent <> '0'
GROUP BY continent
ORDER BY TotalDeathCount DESC;

-- GLOBAL NUMBERS
SELECT location, Max(total_deaths)::numeric As TotalDeathCount
FROM coviddeaths
WHERE (continent = 'Other' OR continent = '0')
   And location <> 'High income'
   And location <> 'Upper middle income'
   And location <> 'Lower middle income'
   And location <> 'Low income'
GROUP BY location
ORDER BY TotalDeathCount DESC;

-- Total Population vs Vaccinations
-- Shows Percentage of Population that has recieved at least one Covid Vaccine
WITH vaccination_totals AS (
  SELECT cd.continent, cd.location, cd.date, cd.population, v.new_vaccinations,
    SUM(v.new_vaccinations) OVER (PARTITION BY cd.location ORDER BY cd.location, cd.date) AS RollingPeopleVaccinated
  FROM coviddeaths cd
  FULL OUTER JOIN vaccinations v ON cd.location = v.location AND cd.date = v.date
  WHERE (cd.continent IS NULL OR cd.continent NOT IN ('Other', '0'))
    AND cd.location NOT IN ('High income', 'Upper middle income', 'Lower middle income', 'Low income')
)
SELECT *, (RollingPeopleVaccinated/population) * 100 AS PercentagePeopleVaccinated
FROM vaccination_totals
WHERE new_vaccinations IS NOT NULL AND RollingPeopleVaccinated IS NOT NULL
ORDER BY location, date;

-- Using Temp Table to perform Calculation on Partition By in previous query
CREATE TABLE vaccination_totals_table (
  continent TEXT,
  location TEXT,
  date DATE,
  population NUMERIC,
  new_vaccinations NUMERIC,
  rolling_people_vaccinated NUMERIC,
  percentage_people_vaccinated NUMERIC
);

INSERT INTO vaccination_totals_table
WITH vaccination_totals AS (
  SELECT cd.continent, cd.location, cd.date, cd.population, v.new_vaccinations,
    SUM(v.new_vaccinations) OVER (PARTITION BY cd.location ORDER BY cd.location, cd.date) AS rolling_people_vaccinated
  FROM coviddeaths cd
  FULL OUTER JOIN vaccinations v ON cd.location = v.location AND cd.date = v.date
  WHERE (cd.continent IS NULL OR cd.continent NOT IN ('Other', '0'))
    AND cd.location NOT IN ('High income', 'Upper middle income', 'Lower middle income', 'Low income')
)
SELECT 
  continent, 
  location, 
  date, 
  population, 
  new_vaccinations, 
  rolling_people_vaccinated, 
  (rolling_people_vaccinated/population) * 100 AS percentage_people_vaccinated
FROM vaccination_totals
WHERE new_vaccinations IS NOT NULL AND rolling_people_vaccinated IS NOT NULL
ORDER BY location, date;

-- Creating View to store data for later visualizations

Create View PercentagePeopleVaccinated As
WITH vaccination_totals AS (
  SELECT cd.continent, cd.location, cd.date, cd.population, v.new_vaccinations,
    SUM(v.new_vaccinations) OVER (PARTITION BY cd.location ORDER BY cd.location, cd.date) AS RollingPeopleVaccinated
  FROM coviddeaths cd
  FULL OUTER JOIN vaccinations v ON cd.location = v.location AND cd.date = v.date
  WHERE (cd.continent IS NULL OR cd.continent NOT IN ('Other', '0'))
    AND cd.location NOT IN ('High income', 'Upper middle income', 'Lower middle income', 'Low income')
)
SELECT *, (RollingPeopleVaccinated/population) * 100 AS PercentagePeopleVaccinated
FROM vaccination_totals
WHERE new_vaccinations IS NOT NULL AND RollingPeopleVaccinated IS NOT NULL
ORDER BY location, date;






